name: Monitor Changes in Text Files

on:
  push:
    paths:
      - 'app/**/*.txt'

jobs:
  check-text-file-changes:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Install jq
        run: sudo apt-get install jq

      - name: Find Modified Text Files
        id: find_modified_files
        run: |
          # Check if there is a previous commit to compare against
          if git rev-parse --verify HEAD~1; then
            PREV_SHA=$(git rev-parse HEAD~1)
          else
            # If there is no previous commit, use the initial commit
            PREV_SHA=$(git rev-list --max-parents=0 HEAD)
          fi
          
          # Get the SHA for the current commit
          CURRENT_SHA=$(git rev-parse HEAD)
          
          # List all changed .txt files between the previous and current commit
          FILES=$(git diff --name-only $PREV_SHA $CURRENT_SHA -- 'app/**/*.txt')
          # Create a JSON array
          JSON_FILES=$(jq -n --arg files "$FILES" '$files | split("\n") | map(select(. != ""))')
          # Write the JSON array to the environment file
          echo "FILES_JSON=$JSON_FILES" >> $GITHUB_ENV

      - name: Send File Contents to API Endpoint
        if: env.FILES_JSON != '[]'
        run: |
          # Read the array of files from the environment variable
          FILES=$(echo $FILES_JSON | jq -r '.[]')
          # Loop through the files and send their contents to the API endpoint
          for FILE in $FILES; do
            CONTENT=$(jq -Rs . "$FILE")
            curl -X POST -H "Content-Type: application/json" -d "{\"file\": \"$FILE\", \"content\": $CONTENT}" https://api.example.com/endpoint
          done
        env:
          FILES_JSON: ${{ env.FILES_JSON }}